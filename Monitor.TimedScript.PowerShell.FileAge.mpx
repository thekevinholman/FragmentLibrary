<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A MONITOR which runs a timed PowerShell script and inspects a FolderPath for files that are older than a threshold
	If any files are OLDER than a threshold in Minutes we will consider this bad.
	The example is when we expect files to change and if they do not something is broken
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem  
  UniqueID - Is a unique short description of the monitor purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "MonitorFilesInFolder"
  IntervalSeconds - How often the script should run
  FolderPath - a Local or UNC path to search such as C:\TEST\Folder or \\servername\sharename\TEST\Folder
  FileExtensionFilter - a comma seperated wildcard supporting filter in the format of *.log,*.t?t
  FileAgeThresholdMinutes - The INTEGER age of the files to be considered old in minutes
  FileCountThreshold - The number of old files needed to breach the threshold
  
Version: 1.2
LastModified: 25-May-2019
%%

In this fragment you need to replace:
  ##CompanyID##
  ##AppName##
  ##ClassID##
  ##UniqueID##
  ##IntervalSeconds##
  ##FolderPath##
  ##FileExtensionFilter##
  ##FileAgeThresholdMinutes##
  ##FileCountThreshold##
	

This fragment depends on references:  
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Health", ID="System.Health.Library"
  
@@Author=Kevin Holman@@    
--> 
	<TypeDefinitions>
		<ModuleTypes>
			<DataSourceModuleType ID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.DS" Accessibility="Internal" Batching="false">
				<Configuration>
					<xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileAgeThresholdMinutes" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileExtensionFilter" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileCountThreshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FolderPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>					
					<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="FileAgeThresholdMinutes" Selector="$Config/FileAgeThresholdMinutes$" ParameterType="int" />
					<OverrideableParameter ID="FileExtensionFilter" Selector="$Config/FileExtensionFilter$" ParameterType="string" />
					<OverrideableParameter ID="FileCountThreshold" Selector="$Config/FileCountThreshold$" ParameterType="int" />
					<OverrideableParameter ID="FolderPath" Selector="$Config/FolderPath$" ParameterType="string" />	
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<ModuleImplementation Isolation="Any">
					<Composite>
						<MemberModules>
							<DataSource ID="Scheduler" TypeID="System!System.Scheduler">
								<Scheduler>
									<SimpleReccuringSchedule>
										<Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
										<SyncTime>$Config/SyncTime$</SyncTime>
									</SimpleReccuringSchedule>
									<ExcludeDates></ExcludeDates>
								</Scheduler>
							</DataSource>
							<ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
								<ScriptName>##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.DS.ps1</ScriptName>
								<ScriptBody>
#=================================================================================
#  File age monitoring script
#  This script takes a file age threshold, file extension filter, Count, and path
#  It will evaluate if a threshold is breached and output good or bad with properties
#
#  Author: Kevin Holman
#  v1.2
#=================================================================================
param([int]$FileAgeThresholdMinutes,[string]$FileExtensionFilter,[int]$FileCountThreshold,[string]$FolderPath)


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
#[int]$FileAgeThresholdMinutes = 10
#[string]$FileExtensionFilter = "*.message,*.n?ack"
#[int]$FileCountThreshold = 2
#[string]$FolderPath = "c:\test"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
$ScriptName = "##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.DS.ps1"
$EventID = "8675"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n FolderPath: ($FolderPath) `n FileExtensionFilter: ($FileExtensionFilter) `n FileAgeThresholdMinutes: ($FileAgeThresholdMinutes) `n FileCountThreshold: ($FileCountThreshold) `n Running as ($whoami).")

# Test to see if the folder exists and exit with error if not
IF (!(Test-Path $FolderPath))
{
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"FATAL ERROR:  The expected folder ($FolderPath) was not found.")
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('Message','The FolderPath was not available.')
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
  $bag.AddValue('FileAgeThresholdMinutes',$FileAgeThresholdMinutes)
  $bag.AddValue('FileCountThreshold',$FileCountThreshold)
  # Return all bags
  $bag
  EXIT
}

# Clear any previous errors
$Error.Clear()
#Build array from filter string
$FileExtensionFilterArr = $FileExtensionFilter.Split(",")

# Create Empty array
$FolderItems = @()
#Create empty filter string:
[string]$FileExtensionFilterString = ""

# Loop through each filter extension and get the files then combine them into one big array
# We use this because using Get-ChildItem -Include can throw errors if items change rapdily 
FOREACH ($FileExtensionFilterString in $FileExtensionFilterArr)
{
  $FoldItemsTempArr = Get-ChildItem $FolderPath -Filter $FileExtensionFilterString
  $FolderItems += $FoldItemsTempArr
}

#Exit the script if we throw an error from Get-ChildItem
IF ($Error) 
{ 
  $momapi.LogScriptEvent($ScriptName,$EventID,1,"`n FATAL ERROR: Error while getting folderitems in path: ($FolderPath). `n Terminating script. `n Error is: ($Error).")
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('Message',"Running Get-ChildItem for the FolderPath threw an Error. $Error")
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
  $bag.AddValue('FileAgeThresholdMinutes',$FileAgeThresholdMinutes)
  $bag.AddValue('FileCountThreshold',$FileCountThreshold)
  # Return all bags
  $bag
  EXIT
}

[int]$i=0
[string]$OldFileList = "Files older than threshold: "

# Loop through each item and see if any folderitems are older than the threshold
FOREACH ($FolderItem in $FolderItems)
{
  [datetime]$FolderItemLastWriteTime = $FolderItem.LastWriteTime
  [int]$FileAge = ($StartTime - $FolderItemLastWriteTime).TotalMinutes
    
  IF ($FileAge -gt $FileAgeThresholdMinutes)
  {
    #Since this is true we found a file older than the threshold
    #Increment a counter in case more than 1 file must be found older than threshold
    $i++
    [string]$FolderItemFullName = $FolderItem.FullName
    [string]$FolderItemLastWriteTimeStr = $FolderItemLastWriteTime.ToString()
    $OldFileList = $OldFileList + $FolderItemFullName + " " + $FolderItemLastWriteTimeStr + ", "
  }
}

#Evaluate if number of old files found is greater or equal to our threshold
IF ($i -ge $FileCountThreshold)
{
  #This is true so number of old files were found greater than or equal to threshold
  #Truncate log in case it is too big
  IF ($OldFileList.Length -gt 1024)
  {
    $OldFileList = $OldFileList.Substring(0,1024)
  } 
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Old files were found. `n ($OldFileList).")
  $bag.AddValue('Result','BadCondition')
  $bag.AddValue('Message',$OldFileList)
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
  $bag.AddValue('FileAgeThresholdMinutes',$FileAgeThresholdMinutes)
  $bag.AddValue('FileCountThreshold',$FileCountThreshold)
}
ELSE
{
  $bag.AddValue('Result','GoodCondition')
  $bag.AddValue('Message','No old files found, or less than the FileCountThreshold')
  $bag.AddValue('FolderPath',$FolderPath)
  $bag.AddValue('FileExtensionFilter',$FileExtensionFilter)
  $bag.AddValue('FileAgeThresholdMinutes',$FileAgeThresholdMinutes)
  $bag.AddValue('FileCountThreshold',$FileCountThreshold)
}

# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script								
                </ScriptBody>
								<Parameters>
									<Parameter>
										<Name>FileAgeThresholdMinutes</Name>
										<Value>$Config/FileAgeThresholdMinutes$</Value>									
									</Parameter>
									<Parameter>
										<Name>FileExtensionFilter</Name>
										<Value>$Config/FileExtensionFilter$</Value>									
									</Parameter>
									<Parameter>
										<Name>FileCountThreshold</Name>
										<Value>$Config/FileCountThreshold$</Value>									
									</Parameter>										
									<Parameter>
										<Name>FolderPath</Name>
										<Value>$Config/FolderPath$</Value>									
									</Parameter>									
								</Parameters>
								<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
							</ProbeAction>
						</MemberModules>
						<Composition>
							<Node ID="PA">
								<Node ID="Scheduler" />
							</Node>
						</Composition>
					</Composite>
				</ModuleImplementation>
				<OutputType>System!System.PropertyBagData</OutputType>
			</DataSourceModuleType>
		</ModuleTypes>
		<MonitorTypes>
			<UnitMonitorType ID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.MonitorType" Accessibility="Internal">
				<MonitorTypeStates>
					<MonitorTypeState ID="GoodCondition" NoDetection="false" />
					<MonitorTypeState ID="BadCondition" NoDetection="false" />
				</MonitorTypeStates>
				<Configuration>
					<xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="0" name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileAgeThresholdMinutes" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileExtensionFilter" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FileCountThreshold" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
					<xsd:element minOccurs="1" name="FolderPath" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>					
					<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema"></xsd:element>
				</Configuration>
				<OverrideableParameters>
					<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
					<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
					<OverrideableParameter ID="FileAgeThresholdMinutes" Selector="$Config/FileAgeThresholdMinutes$" ParameterType="int" />
					<OverrideableParameter ID="FileExtensionFilter" Selector="$Config/FileExtensionFilter$" ParameterType="string" />
					<OverrideableParameter ID="FileCountThreshold" Selector="$Config/FileCountThreshold$" ParameterType="int" />
					<OverrideableParameter ID="FolderPath" Selector="$Config/FolderPath$" ParameterType="string" />	
					<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
				</OverrideableParameters>
				<MonitorImplementation>
					<MemberModules>
						<DataSource ID="DS" TypeID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.DS">
							<IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
							<SyncTime>$Config/SyncTime$</SyncTime>
							<FileAgeThresholdMinutes>$Config/FileAgeThresholdMinutes$</FileAgeThresholdMinutes>
							<FileExtensionFilter>$Config/FileExtensionFilter$</FileExtensionFilter>
							<FileCountThreshold>$Config/FileCountThreshold$</FileCountThreshold>
							<FolderPath>$Config/FolderPath$</FolderPath>
							<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
						</DataSource>
						<ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
							<Expression>
								<SimpleExpression>
									<ValueExpression>
										<XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
									</ValueExpression>
									<Operator>Equal</Operator>
									<ValueExpression>
										<Value Type="String">GoodCondition</Value>
									</ValueExpression>
								</SimpleExpression>
							</Expression>
						</ConditionDetection>
						<ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
							<Expression>
								<SimpleExpression>
									<ValueExpression>
										<XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
									</ValueExpression>
									<Operator>Equal</Operator>
									<ValueExpression>
										<Value Type="String">BadCondition</Value>
									</ValueExpression>
								</SimpleExpression>
							</Expression>
						</ConditionDetection>
					</MemberModules>
					<RegularDetections>
						<RegularDetection MonitorTypeStateID="GoodCondition">
							<Node ID="GoodConditionFilter">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
						<RegularDetection MonitorTypeStateID="BadCondition">
							<Node ID="BadConditionFilter">
								<Node ID="DS" />
							</Node>
						</RegularDetection>
					</RegularDetections>
					<OnDemandDetections>
						<OnDemandDetection MonitorTypeStateID="GoodCondition">
							<Node ID="GoodConditionFilter">
								<Node ID="PA" />
							</Node>
						</OnDemandDetection>
						<OnDemandDetection MonitorTypeStateID="BadCondition">
							<Node ID="BadConditionFilter">
								<Node ID="PA" />
							</Node>
						</OnDemandDetection>
					</OnDemandDetections>
				</MonitorImplementation>
			</UnitMonitorType>
		</MonitorTypes>
	</TypeDefinitions>
	<Monitoring>
		<Monitors>
			<UnitMonitor ID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor" Accessibility="Public" Enabled="true" Target="##ClassID##" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.MonitorType" ConfirmDelivery="true">
				<Category>AvailabilityHealth</Category>
				<AlertSettings AlertMessage="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.AlertMessage">
					<AlertOnState>Warning</AlertOnState>
					<AutoResolve>true</AutoResolve>
					<AlertPriority>Normal</AlertPriority>
					<AlertSeverity>Error</AlertSeverity>
					<AlertParameters>
						<AlertParameter1>$Data/Context/Property[@Name='Result']$</AlertParameter1>
						<AlertParameter2>$Data/Context/Property[@Name='Message']$</AlertParameter2>
						<AlertParameter3>$Data/Context/Property[@Name='FolderPath']$</AlertParameter3>
						<AlertParameter4>$Data/Context/Property[@Name='FileExtensionFilter']$</AlertParameter4>
						<AlertParameter5>$Data/Context/Property[@Name='FileAgeThresholdMinutes']$</AlertParameter5>
						<AlertParameter6>$Data/Context/Property[@Name='FileCountThreshold']$</AlertParameter6>
					</AlertParameters>					
				</AlertSettings>
				<OperationalStates>
					<OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
					<OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />
				</OperationalStates>
				<Configuration>
					<IntervalSeconds>##IntervalSeconds##</IntervalSeconds>
					<SyncTime></SyncTime>
					<FileAgeThresholdMinutes>##FileAgeThresholdMinutes##</FileAgeThresholdMinutes>
					<FileExtensionFilter>##FileExtensionFilter##</FileExtensionFilter>
					<FileCountThreshold>##FileCountThreshold##</FileCountThreshold>
					<FolderPath>##FolderPath##</FolderPath>
					<TimeoutSeconds>120</TimeoutSeconds>
				</Configuration>
			</UnitMonitor>
		</Monitors>
	</Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor">
          <Name>##CompanyID## ##AppName## ##UniqueID## File Age Monitor</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor" SubElementID="GoodCondition">
          <Name>GoodCondition</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor" SubElementID="BadCondition">
          <Name>BadCondition</Name>
        </DisplayString>
        <DisplayString ElementID="##CompanyID##.##AppName##.##UniqueID##.FileAge.Monitor.AlertMessage">
          <Name>##CompanyID## ##AppName## ##UniqueID## File Monitor: Old Files Found</Name>
          <Description>##CompanyID## ##AppName## ##UniqueID## File Age Monitor
Result: {0}
FolderPath: {2}
FileExtensionFilter: {3}
FileAgeThresholdMinutes: {4}
FileCountThreshold: {5}
Message: {1}</Description>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
